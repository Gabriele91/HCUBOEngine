parameters
{
    mask float(-1.0)
    diffuse_map texture("white")
}

sub_effect
{
    requirement
    {
        driver  OpenGL(4,1)
        shader  GLSL(410)
    }
    
    technique "shadow_spot"
    {
        pass 
        {
            zbuffer less
            blend off
            cullface front
            lights off
            shader source 
            {
                #pragma vertex
                //input vertex
                layout(location = ATT_POSITIONT) in vec3 position;
                layout(location = ATT_TEXCOORD0) in vec2 uvcoord;
                //uniform
                uniform mat4 projection;
                uniform mat4 view;
                uniform mat4 model;
                //output
                out vec2 frag_uvcoord;
                //compute vertex
                void main()
                {
                    //position
                    gl_Position = projection *  view * model * vec4(position, 1.0);
                    //uvmap
                    frag_uvcoord = uvcoord;
                }
                
                #pragma fragment
                
                //input
                in vec2 frag_uvcoord;
                //map
                uniform sampler2D diffuse_map;
                uniform float mask;

                void main()
                {
                    //get alpha
                    vec4 texture_color = texture(diffuse_map, frag_uvcoord);
                    //mask
                    if (texture_color.a <= mask)
                    {
                        discard;
                    }
                }
            }
        }
    }

    technique "shadow_point"
    {
        pass 
        {
            zbuffer less
            blend off
            cullface front
            lights off
            shader source 
            {
                #pragma vertex
                //input vertex
                layout(location = ATT_POSITIONT) in vec3 position;
                layout(location = ATT_TEXCOORD0) in vec2 uvcoord;
                //uniform
                uniform mat4 model;
                //output
                out vec2 geom_uvcoord;
                //compute vertex
                void main()
                {
                    //position
                    gl_Position = model * vec4(position, 1.0);
                    //uvmap
                    geom_uvcoord = uvcoord;
                }
                #pragma geometry
                
                //in vertex
                layout (triangles) in;
                //out vertex
                layout (triangle_strip, max_vertices=18) out;
                //uniform
                uniform mat4 projection;
                uniform mat4 view[6];
                //input shader
                in vec2 geom_uvcoord[3];
                //output to frag shader
                out vec4 frag_position;
                out vec2 frag_uvcoord;
                //compute geometry
                void main()
                {
                
                    for(int face = 0; face < 6; ++face)
                    {
                        // built-in variable that specifies to which face we render.
                        gl_Layer = face; 
                        // for each triangle's vertices
                        for(int i = 0; i < 3; ++i) 
                        {
                            frag_uvcoord  = geom_uvcoord[i]; 
                            frag_position = gl_in[i].gl_Position;
                            gl_Position   = projection * view[face] * frag_position;
                            EmitVertex();
                        }    
                        //end primitive
                        EndPrimitive();
                    }
                }
                
                #pragma fragment
                
                //input
                in vec4 frag_position;
                in vec2 frag_uvcoord;
                //uniform
                uniform vec3  light_position;
                uniform float far_plane;
                //map
                uniform sampler2D diffuse_map;
                uniform float mask;

                void main()
                {
                    //get alpha
                    vec4 texture_color = texture(diffuse_map, frag_uvcoord);
                    
                    //mask
                    if (texture_color.a <= mask)
                    {
                        discard;
                    }
                    
                    //compute distance between fragment and light source
                    float light_distance = length(frag_position.xyz - light_position);
        
                    //[0,1] range
                    light_distance = light_distance / far_plane;
                    
                    //write as depth
                    gl_FragDepth = light_distance;
                }
            }
        }
    }
}